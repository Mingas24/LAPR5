{
	"info": {
		"_postman_id": "6fade1a3-0839-4bca-87e8-d86b0af8237e",
		"name": "LAPR5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:5000/api/Driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverCC\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"dced\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"dcld\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverDate\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"dled\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"dln\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverName\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverNIF\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverNumber\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverType\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"driverTypeID\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().driverName).to.eql(pm.environment.get(\"driverName\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().driverCC).to.eql(pm.environment.get(\"driveCC\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().dced).to.eql(pm.environment.get(\"dced\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().dcld).to.eql(pm.environment.get(\"dcld\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().driverDate).to.eql(pm.environment.get(\"driverDate\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().dled).to.eql(pm.environment.get(\"dled\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().dln).to.eql(pm.environment.get(\"dln\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().driverNIF).to.eql(pm.environment.get(\"driverNIF\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().driverType).to.eql(pm.environment.get(\"driverType\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().driverTypeID).to.eql(pm.environment.get(\"driverNameID\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverCC).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().dced).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().dcld).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverDate).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().dled).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().dln).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverName).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverNIF).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverNumber).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverType).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().driverTypeID).to.be.not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"driverName\":\"Rui\",\r\n    \"birthDate\":\"20-11-1990\",\r\n    \"citizenCardNumber\":\"12345678\",\r\n    \"driverNIF\":\"123456789\",\r\n    \"mecanographicNumber\":\"abcde1234\",\r\n    \"entryDate\":\"20-11-2011\",\r\n    \"leavingDate\":\"10-05-2020\",\r\n    \"driverType\":[\"14\",\"15\"],\r\n    \"dln\":\"P-1234567 8\",\r\n    \"dled\":\"20-11-2050\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/Driver",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"Driver"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/VehicleService",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"vehicleServiceName\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"vehicleServiceCode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"vehicleServiceColor\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"workblockList\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"startTime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"datetime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"endTime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"datetime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"workblockCode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"trips\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripCode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"lineID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripLineID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pathID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripPathID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"nodesList\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"node\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"passingTime\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().vehicleServiceName).to.eql(pm.environment.get(\"vehicleServiceName\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().vehicleServiceCode).to.eql(pm.environment.get(\"vehicleServiceCode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().vehicleServiceColor).to.eql(pm.environment.get(\"vehicleServiceColor\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().workblockList).to.eql(pm.environment.get(\"workblockList\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().startTime).to.eql(pm.environment.get(\"startTime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().datetime).to.eql(pm.environment.get(\"datetime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().endTime).to.eql(pm.environment.get(\"endTime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().workblockCode).to.eql(pm.environment.get(\"workblockCode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"code\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().trips).to.eql(pm.environment.get(\"trips\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripCode).to.eql(pm.environment.get(\"tripCode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"code\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().lineID).to.eql(pm.environment.get(\"lineID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripLineID).to.eql(pm.environment.get(\"tripLineID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pathID).to.eql(pm.environment.get(\"pathID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripPathID).to.eql(pm.environment.get(\"tripPathID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().startDate).to.eql(pm.environment.get(\"startDate\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().date).to.eql(pm.environment.get(\"date\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().nodesList).to.eql(pm.environment.get(\"nodesList\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().node).to.eql(pm.environment.get(\"node\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().passingTime).to.eql(pm.environment.get(\"passingTime\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().vehicleServiceName).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().vehicleServiceCode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().vehicleServiceColor).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().workblockList).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().startTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().datetime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().endTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().workblockCode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().code).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().trips).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripCode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().nodesList).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().node).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().passingTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().lineID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripLineID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pathID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripPathID).to.be.not.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"vehicleServiceName\":\"VS2\",\r\n    \"vehicleServiceCode\":\"VSCode1235\",\r\n    \"vehicleServiceColor\":\"VSColor\",\r\n    \"workblockList\":[\"WB1010\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/VehicleService",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"VehicleService"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/Workblock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"startTime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"datetime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"endTime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"datetime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"workblockCode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"trips\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripCode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"code\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"lineID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripLineID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pathID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripPathID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"nodesList\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"node\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"passingTime\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().startTime).to.eql(pm.environment.get(\"startTime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().datetime).to.eql(pm.environment.get(\"datetime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().endTime).to.eql(pm.environment.get(\"endTime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().workblockCode).to.eql(pm.environment.get(\"workblockCode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"code\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().trips).to.eql(pm.environment.get(\"trips\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripCode).to.eql(pm.environment.get(\"tripCode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"code\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().lineID).to.eql(pm.environment.get(\"lineID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripLineID).to.eql(pm.environment.get(\"tripLineID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pathID).to.eql(pm.environment.get(\"pathID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripPathID).to.eql(pm.environment.get(\"tripPathID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().startDate).to.eql(pm.environment.get(\"startDate\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().date).to.eql(pm.environment.get(\"date\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().nodesList).to.eql(pm.environment.get(\"nodesList\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().node).to.eql(pm.environment.get(\"node\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().passingTime).to.eql(pm.environment.get(\"passingTime\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().startTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().datetime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().endTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().workblockCode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().code).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().trips).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripCode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().nodesList).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().node).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().passingTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().lineID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripLineID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pathID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripPathID).to.be.not.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"StartTime\": \"20-10-2021 11:00\",\r\n    \"EndTime\": \"20-10-2021 12:00\",\r\n    \"Code\": \"WB1010\",\r\n    \"trips\": [\"T1010\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/Workblock",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"Workblock"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/Trip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"tripCode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"lineID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pathID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"nodes\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"node\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"passingTime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"startDate\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"startTime\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().tripCode).to.eql(pm.environment.get(\"tripCode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().lineID).to.eql(pm.environment.get(\"lineID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pathID).to.eql(pm.environment.get(\"pathID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().startDate).to.eql(pm.environment.get(\"startDate\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().startTime).to.eql(pm.environment.get(\"startTime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().nodes).to.eql(pm.environment.get(\"nodes\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().node).to.eql(pm.environment.get(\"node\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().passingTime).to.eql(pm.environment.get(\"passingTime\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().tripCode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().node).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().passingTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().lineID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pathID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().startDate).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().startTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().nodes).to.be.not.null;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"TripCode\": \"T1010\",\r\n    \"LineID\": 1,\r\n    \"PathID\": 1,\r\n    \"StartDate\": \"20-10-2021\",\r\n    \"StartTime\": \"20-10-2021 11:00\",\r\n    \"nodes\": [\"1\"],\r\n    \"times\": [12]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/Trip",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"Trip"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/api/User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"mail\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pass\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"address\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pNumber\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"role\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"age\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().mail).to.eql(pm.environment.get(\"mail\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pass).to.eql(pm.environment.get(\"pass\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().address).to.eql(pm.environment.get(\"address\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pNumber).to.eql(pm.environment.get(\"pNumber\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().role).to.eql(pm.environment.get(\"role\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().age).to.eql(pm.environment.get(\"age\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().mail).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pass).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().name).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().address).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pNumber).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().role).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().age).to.be.not.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Mail\": \"Teste123\",\r\n    \"Pass\": \"123qwe5\",\r\n    \"Name\": \"Teste\",\r\n    \"Address\": \"Ruadosquims\",\r\n    \"PNumber\": 912986120,\r\n    \"Role\": \"Normal\",\r\n    \"Age\":\"22-10-2000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/User",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://lapr5-grupo001.herokuapp.com/api/driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"description\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().description).to.eql(pm.environment.get(\"description\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().description).to.be.not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://lapr5-grupo001.herokuapp.com/api/driver/listDriverTypes",
					"protocol": "https",
					"host": [
						"lapr5-grupo001",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"driver",
						"listDriverTypes"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://lapr5-grupo001.herokuapp.com/api/lines",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"lineID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"color\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"linePath\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"orientation\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pathID\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().color).to.eql(pm.environment.get(\"color\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().lineID).to.eql(pm.environment.get(\"lineID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().linePath).to.eql(pm.environment.get(\"linePath\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().orientation).to.eql(pm.environment.get(\"orientation\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pathID).to.eql(pm.environment.get(\"pathID\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().lineID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().name).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pathID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().color).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().linePath).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().orientation).to.be.not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://lapr5-grupo001.herokuapp.com/api/lines",
					"protocol": "https",
					"host": [
						"lapr5-grupo001",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"lines"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://lapr5-grupo001.herokuapp.com/api/nodes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"nodeID\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"latitude\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"longitude\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"shortName\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"isDepot\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"isReliefPoint\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"crewTravelTime\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"duration\");\r",
							"});\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().latitude).to.eql(pm.environment.get(\"latitude\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().nodeID).to.eql(pm.environment.get(\"nodeID\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().longitude).to.eql(pm.environment.get(\"longitude\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().shortName).to.eql(pm.environment.get(\"shortName\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().isDepot).to.eql(pm.environment.get(\"isDepot\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().isReliefPoint).to.eql(pm.environment.get(\"isReliefPoint\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().crewTravelTime).to.eql(pm.environment.get(\"crewTravelTime\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"id\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().duration).to.eql(pm.environment.get(\"duration\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().nodeID).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().name).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().latitude).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().longitude).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().shortName).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().isDepot).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().isReliefPoint).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().crewTravelTime).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().id).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().duration).to.be.not.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://lapr5-grupo001.herokuapp.com/api/nodes",
					"protocol": "https",
					"host": [
						"lapr5-grupo001",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"nodes"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://lapr5-grupo001.herokuapp.com/api/path",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"key\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"isEmpty\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"pathNode\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"node1\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"node2\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"duration\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"distance\");\r",
							"});\r",
							"\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().key).to.eql(pm.environment.get(\"key\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().pathNode).to.eql(pm.environment.get(\"pathNode\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().node1).to.eql(pm.environment.get(\"node1\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().node2).to.eql(pm.environment.get(\"node2\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().duration).to.eql(pm.environment.get(\"duration\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().distance).to.eql(pm.environment.get(\"distance\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().key).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().isEmpty).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().pathNode).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().node1).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().node2).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().duration).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().distance).to.be.not.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://lapr5-grupo001.herokuapp.com/api/path/listPaths",
					"protocol": "https",
					"host": [
						"lapr5-grupo001",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"path",
						"listPaths"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://lapr5-grupo001.herokuapp.com/api/vehicleType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//You can test for the response status code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//You can test if the response body contains a string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"autonomy\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"cost\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"averageSpeed\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"energySource\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"consumption\");\r",
							"});\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"emissions\");\r",
							"});\r",
							"\r",
							"\r",
							"//You can check whether a response property has the same value as a variable \r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().autonomy).to.eql(pm.environment.get(\"autonomy\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().cost).to.eql(pm.environment.get(\"cost\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().avereageSpeed).to.eql(pm.environment.get(\"averageSpeed\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().energySource).to.eql(pm.environment.get(\"energySource\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().consumption).to.eql(pm.environment.get(\"consumption\"));\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"    pm.expect(pm.response.json().emissions).to.eql(pm.environment.get(\"emissions\"));\r",
							"});\r",
							"\r",
							"//Asserting a value type\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//If not null\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().name).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().autonomy).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().cost).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().avereageSpeed).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().energySource).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().consumption).to.be.not.null;\r",
							"});\r",
							"pm.test(\"Not null\", () => {\r",
							"    pm.expect(pm.response.json().emissions).to.be.not.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://lapr5-grupo001.herokuapp.com/api/vehicleType/listVehicleTypes",
					"protocol": "https",
					"host": [
						"lapr5-grupo001",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"vehicleType",
						"listVehicleTypes"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}